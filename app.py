import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import io
import base64

# Tenta importar o componente de interatividade do Plotly
try:
    from streamlit_plotly_events import plotly_events
    PLOTLY_EVENTS_AVAILABLE = True
except ImportError:
    PLOTLY_EVENTS_AVAILABLE = False
    
# Configura√ß√£o da p√°gina e √≠cone
st.set_page_config(
    page_title="Sistema de Previs√£o Clim√°tica - Brasil",
    page_icon="üåßÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Estilos CSS para responsividade e design
st.markdown("""
<style>
    /* Estilos para melhor visualiza√ß√£o em celular */
    .st-emotion-cache-1r6y9d7 { flex-direction: column; }
    .st-emotion-cache-183n07d { flex-direction: column; }
    .st-emotion-cache-1f190e8 { flex-direction: column; }
    .st-emotion-cache-s2e93h { flex-direction: column; }
    .st-emotion-cache-1090333 { gap: 1rem; }
    
    /* Outros estilos para deixar o layout mais moderno */
    .st-emotion-cache-12oz5g7 {
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        background-color: #f0f2f6;
    }
    .stButton>button {
        border-radius: 12px;
        border: 1px solid #0077b6;
        color: white;
        background-color: #0077b6;
        transition: all 0.3s ease;
    }
    .stButton>button:hover {
        background-color: #0096c7;
        border-color: #0096c7;
        transform: scale(1.02);
    }
    h1, h2, h3 { color: #03045e; }
</style>
""", unsafe_allow_html=True)

# ----------------- Fun√ß√µes de Simula√ß√£o (sem altera√ß√£o l√≥gica) -----------------
def generate_municipios_list():
    """Gera uma lista simulada de munic√≠pios com coordenadas e tipo de esta√ß√£o."""
    return pd.DataFrame({
        'cidade': [
            "Campinas", "Ribeir√£o Preto", "Uberl√¢ndia", "Santos", "Londrina",
            "S√£o Jos√© dos Campos", "Feira de Santana", "Cuiab√°", "An√°polis",
            "Maring√°", "Juiz de Fora", "Niter√≥i", "Campos dos Goytacazes",
            "Caxias do Sul", "Sorocaba", "Joinville", "Natal", "Itirapina",
            "Araraquara", "Bauru", "Franca", "Jundia√≠", "Piracicaba",
            "Presidente Prudente", "S√£o Carlos", "Taubat√©"
        ],
        'estado': [
            'SP', 'SP', 'MG', 'SP', 'PR', 'SP', 'BA', 'MT', 'GO', 'PR', 'MG', 'RJ', 'RJ', 'RS', 'SP', 'SC', 'RN', 'SP',
            'SP', 'SP', 'SP', 'SP', 'SP', 'SP', 'SP', 'SP'
        ],
        'lat': [
            -22.9099, -21.1762, -18.918, -23.9634, -23.3106, -23.1794, -12.2464, -15.5989,
            -16.3275, -23.424, -21.763, -22.8889, -21.7583, -29.1672, -23.498, -26.304, -5.7947, -22.259,
            -21.807, -22.316, -20.538, -23.186, -22.721, -22.124, -22.016, -23.023
        ],
        'lon': [
            -47.0626, -47.8823, -48.2772, -46.3353, -51.1627, -45.8869, -38.9668, -56.0949,
            -48.9566, -51.9389, -43.345, -43.107, -41.3328, -51.1778, -47.4488, -48.847, -35.2114, -47.935,
            -48.188, -49.066, -47.400, -46.883, -47.649, -51.401, -47.893, -45.556
        ],
        'tipo_estacao': [
            'Autom√°tica', 'Autom√°tica', 'Convencional', 'Autom√°tica', 'Convencional',
            'Autom√°tica', 'Convencional', 'Autom√°tica', 'Convencional', 'Autom√°tica',
            'Convencional', 'Autom√°tica', 'Convencional', 'Autom√°tica', 'Autom√°tica',
            'Convencional', 'Autom√°tica', 'Autom√°tica', 'Autom√°tica', 'Convencional', 'Convencional',
            'Autom√°tica', 'Autom√°tica', 'Convencional', 'Convencional', 'Autom√°tica'
        ]
    })

def make_prediction_series(data, days=1):
    predictions = []
    dates = [datetime.now() + timedelta(days=i) for i in range(days)]
    for i in range(days):
        base_precip = np.random.uniform(0.5, 5) 
        temp_factor = 1 + (data.get("temp_max", 25) - 25) * 0.1
        umidade_factor = 1 + (data.get("umidade", 60) - 60) * 0.05
        time_factor = np.sin(np.pi * 2 * i / days) * 2 + 1
        precipitacao = max(0, base_precip * temp_factor * umidade_factor * time_factor + np.random.uniform(-1, 1))
        temperatura_media = max(0, data.get("temp_max", 25) + np.random.uniform(-3, 3))
        umidade_relativa = max(0, min(100, data.get("umidade", 60) + np.random.uniform(-5, 5)))
        predictions.append({
            "data": dates[i].strftime("%Y-%m-%d"),
            "precipitacao_mm": precipitacao,
            "temperatura_media": temperatura_media,
            "umidade_relativa": umidade_relativa
        })
    return pd.DataFrame(predictions)

def make_prediction(data):
    base_precip = np.random.uniform(0, 15)
    if data.get("temp_max", 25) > 30:
        base_precip *= 1.5
    if data.get("umidade", 50) > 70:
        base_precip *= 1.3
    return max(0, base_precip)

def generate_monthly_forecast_data(municipios):
    """Simula uma previs√£o mensal para todas as cidades."""
    data_list = []
    start_date = datetime.now()
    end_date = start_date + timedelta(days=30)
    current_date = start_date
    while current_date < end_date:
        for municipio in municipios:
            day_of_month = current_date.day
            base_precip = np.sin(np.pi * 2 * day_of_month / 30) * 10 + 15
            precipitacao = max(0, base_precip + np.random.uniform(-5, 5))
            data_list.append({
                "municipio": municipio,
                "data": current_date.strftime("%Y-%m-%d"),
                "precipitacao_mm": precipitacao,
                "temperatura_media": np.random.uniform(20, 30),
                "umidade_relativa": np.random.uniform(50, 90),
            })
        current_date += timedelta(days=1)
    return pd.DataFrame(data_list)

# Fun√ß√£o para simular as m√©tricas de desempenho
def simulate_metrics(municipio):
    """Simula m√©tricas de desempenho para um munic√≠pio espec√≠fico."""
    # Estes valores s√£o simulados para demonstra√ß√£o
    base_rmse = np.random.uniform(2.0, 3.5)
    base_mae = np.random.uniform(1.5, 2.5)
    base_r2 = np.random.uniform(0.65, 0.85)
    
    if municipio == "Itirapina":
        # Itirapina, o foco do estudo, tem m√©tricas melhores
        return {
            "RMSE": base_rmse * 0.8,
            "MAE": base_mae * 0.8,
            "R2": min(1.0, base_r2 * 1.1)
        }
    else:
        return {
            "RMSE": base_rmse,
            "MAE": base_mae,
            "R2": base_r2
        }

# Fun√ß√£o principal que roda a aplica√ß√£o
def main():
    st.title("üåßÔ∏è Previs√µes Clim√°ticas: Nuvem & Chuva")
    st.markdown("### Previs√£o de Volume Di√°rio de Chuva (mm)")

    # Sidebar para navega√ß√£o
    st.sidebar.title("Navega√ß√£o üß≠")
    opcao = st.sidebar.selectbox(
        "Escolha uma op√ß√£o:",
        ["Previs√£o Individual", "An√°lise de Dados e Previs√µes", "Upload de CSV", "Sobre o Sistema"]
    )

    # --- Se√ß√£o: Previs√£o Individual ---
    if opcao == "Previs√£o Individual":
        st.header("üîÆ Previs√£o para Chuvas")
        st.markdown("Selecione um munic√≠pio no mapa ou na lista abaixo para obter a previs√£o detalhada.")

        estacoes_df = generate_municipios_list()
        
        fig_mapa = px.scatter_geo(
            estacoes_df,
            lat='lat',
            lon='lon',
            hover_name='cidade',
            color='tipo_estacao',
            title='Localiza√ß√£o das Esta√ß√µes Meteorol√≥gicas (Simula√ß√£o)',
            scope='south america'
        )
        fig_mapa.update_geos(
            lonaxis_range=[-75, -30], lataxis_range=[-35, 5], center={"lat": -14, "lon": -55},
            showcountries=True, countrycolor="black", showsubunits=True, subunitcolor="grey"
        )
        
        # L√≥gica de clique no mapa
        if PLOTLY_EVENTS_AVAILABLE:
            selected_points = plotly_events(fig_mapa, click_event=True)
            if selected_points:
                point_index = selected_points[0]['pointIndex']
                selected_city = estacoes_df.loc[point_index, 'cidade']
                st.session_state['municipio_selecionado'] = selected_city
        else:
            st.warning("‚ö†Ô∏è O componente de intera√ß√£o com o mapa n√£o est√° dispon√≠vel. Por favor, utilize a lista abaixo.")

        municipios_list = estacoes_df["cidade"].tolist()
        municipio_selecionado = st.selectbox(
            "Selecione o Munic√≠pio:",
            municipios_list,
            index=municipios_list.index(st.session_state.get('municipio_selecionado', "Itirapina"))
        )
        st.session_state['municipio_selecionado'] = municipio_selecionado
        
        st.subheader("Par√¢metros da Previs√£o")
        col1, col2 = st.columns(2)
        with col1:
            temp_max = st.slider("Temperatura M√°xima (¬∞C)", -5.0, 45.0, 25.0, 0.1)
            temp_min = st.slider("Temperatura M√≠nima (¬∞C)", -10.0, 35.0, 15.0, 0.1)
        with col2:
            umidade = st.slider("Umidade Relativa (%)", 0.0, 100.0, 60.0, 1.0)
            vel_vento = st.slider("Velocidade do Vento (m/s)", 0.0, 30.0, 5.0, 0.1)
            
        if st.button("üöÄ Gerar Previs√£o", type="primary"):
            dados_input = {
                "municipio": municipio_selecionado,
                "temp_max": temp_max,
                "temp_min": temp_min,
                "umidade": umidade,
                "pressao": 1013, # Valor fixo para simula√ß√£o
                "vel_vento": vel_vento,
                "rad_solar": 20 # Valor fixo para simula√ß√£o
            }
            
            previsoes_df = make_prediction_series(dados_input, days=1)
            st.subheader(f"üìä Previs√£o Di√°ria para {municipio_selecionado}")
            st.dataframe(previsoes_df)

            # Nova se√ß√£o para as m√©tricas de desempenho
            st.markdown("---")
            st.subheader("üìà An√°lise de Desempenho do Modelo")
            st.markdown("*(M√©tricas simuladas para demonstra√ß√£o do modelo XGBoost)*")
            
            metrics_data = simulate_metrics(municipio_selecionado)
            
            # Criando o gr√°fico de barras das m√©tricas
            metrics_df = pd.DataFrame(list(metrics_data.items()), columns=["M√©trica", "Valor"])
            fig_metrics = px.bar(
                metrics_df,
                x="M√©trica",
                y="Valor",
                color="M√©trica",
                title="M√©tricas de Avalia√ß√£o do Modelo",
                color_discrete_map={
                    "RMSE": "#0077b6",
                    "MAE": "#00b4d8",
                    "R2": "#90e0ef"
                },
                text_auto=True
            )
            fig_metrics.update_layout(xaxis_title="", yaxis_title="Valor da M√©trica")
            st.plotly_chart(fig_metrics, use_container_width=True)


    # --- Se√ß√£o: An√°lise de Dados e Previs√µes ---
    elif opcao == "An√°lise de Dados e Previs√µes":
        st.header("üó∫Ô∏è An√°lise de Dados e Previs√µes Mensais")
        st.markdown("Explore a localiza√ß√£o das esta√ß√µes no mapa. Abaixo, selecione um munic√≠pio para ver a previs√£o detalhada para o pr√≥ximo m√™s.")
        
        estacoes_df = generate_municipios_list()
        
        fig_mapa = px.scatter_geo(
            estacoes_df,
            lat='lat',
            lon='lon',
            hover_name='cidade',
            color='tipo_estacao',
            title='Localiza√ß√£o das Esta√ß√µes Meteorol√≥gicas (Simula√ß√£o)',
            scope='south america'
        )
        fig_mapa.update_geos(
            lonaxis_range=[-75, -30], lataxis_range=[-35, 5], center={"lat": -14, "lon": -55},
            showcountries=True, countrycolor="black", showsubunits=True, subunitcolor="grey"
        )
        
        st.plotly_chart(fig_mapa, use_container_width=True)
        
        st.markdown("---")
        
        municipios_list = generate_municipios_list()["cidade"].tolist()
        municipio_mensal_selecionado = st.selectbox(
            "Selecione um Munic√≠pio para a Previs√£o Mensal:",
            municipios_list
        )

        forecast_df = generate_monthly_forecast_data(estacoes_df["cidade"].tolist())
        filtered_df = forecast_df[forecast_df["municipio"] == municipio_mensal_selecionado]

        fig_line = px.line(
            filtered_df, 
            x="data", 
            y="precipitacao_mm", 
            title=f"Previs√£o de Chuva para {municipio_mensal_selecionado} no Pr√≥ximo M√™s",
            color_discrete_sequence=px.colors.qualitative.Plotly
        )
        fig_line.update_layout(xaxis_title="Data", yaxis_title="Precipita√ß√£o (mm)")
        st.plotly_chart(fig_line, use_container_width=True)


    # --- Se√ß√£o: Upload de CSV ---
    elif opcao == "Upload de CSV":
        st.header("üìÅ Fa√ßa o Upload de seus Dados")
        st.markdown("""
        Basta carregar um arquivo CSV e nosso sistema far√° as previs√µes para voc√™!
        
        **Formato esperado do CSV:** `data`, `temp_max`, `temp_min`, `umidade`, `pressao`, `vel_vento`, `rad_solar`
        """)
        
        uploaded_file = st.file_uploader("Escolha um arquivo CSV", type="csv")
        
        if uploaded_file is not None:
            try:
                df = pd.read_csv(uploaded_file)
                st.success("üéâ Arquivo carregado com sucesso!")
                
                with st.expander("Pr√©via dos seus dados"):
                    st.dataframe(df.head())
                
                if st.button("üîÆ Processar Previs√µes", type="primary"):
                    with st.spinner('Processando previs√µes...'):
                        previsoes = [make_prediction(row.to_dict()) for _, row in df.iterrows()]
                    
                    df["previsao_precipitacao"] = previsoes
                    st.subheader("Resultados das Previs√µes")
                    st.dataframe(df)
                    
                    col_graphs1, col_graphs2 = st.columns(2)

                    with col_graphs1:
                        if "data" in df.columns:
                            df["data"] = pd.to_datetime(df["data"])
                            fig_line = px.line(df, x="data", y="previsao_precipitacao", 
                                          title="Previs√£o de Precipita√ß√£o ao Longo do Tempo")
                            fig_line.update_yaxis(title="Precipita√ß√£o (mm)")
                            st.plotly_chart(fig_line, use_container_width=True)

                    with col_graphs2:
                        fig_bar = px.bar(df, x=df.index, y="previsao_precipitacao",
                                    title="Volume de Chuva Previsto por Amostra",
                                    color="previsao_precipitacao",
                                    color_continuous_scale=px.colors.sequential.Teal)
                        fig_bar.update_layout(xaxis_title="Amostra", yaxis_title="Precipita√ß√£o (mm)")
                        st.plotly_chart(fig_bar, use_container_width=True)
                    
                    if "precipitacao_mm" in df.columns:
                         fig_scatter = px.scatter(df, x="precipitacao_mm", y="previsao_precipitacao", 
                                        title="Compara√ß√£o: Dados Reais vs. Previs√µes",
                                        labels={"precipitacao_mm": "Dados Reais (mm)", "previsao_precipitacao": "Previs√£o (mm)"})
                         st.plotly_chart(fig_scatter, use_container_width=True)
                    
                    csv_file = df.to_csv(index=False)
                    b64 = base64.b64encode(csv_file.encode()).decode()
                    href = f"<a href=\"data:file/csv;base64,{b64}\" download=\"previsoes_clima.csv\">üì• Baixar Resultados</a>"
                    st.markdown(href, unsafe_allow_html=True)
                    
            except Exception as e:
                st.error(f"‚ùå Opa, parece que houve um erro ao processar seu arquivo: {str(e)}")

    # --- Se√ß√£o: Sobre o Sistema ---
    else:
        st.header("üëã Bem-vindo ao Sistema de Previs√£o Clim√°tica")
        
        st.markdown("""
        Este sistema foi criado para demonstrar o poder da **Intelig√™ncia Artificial**
        na previs√£o de chuva di√°ria para diversas localidades no Brasil. Usamos um modelo
        de **Machine Learning** avan√ßado, focado em alta precis√£o e adaptabilidade.
        
        #### üìà Por que este sistema √© especial?
        Nossa metodologia segue um rigor cient√≠fico, com etapas como:
        - **Modelos Generaliz√°veis**: O sistema utiliza o modelo **XGBoost** para se adaptar a diferentes regi√µes, n√£o apenas a uma localidade espec√≠fica.
        - **Engenharia de Features**: Criamos vari√°veis complexas a partir de dados simples, o que aumenta a precis√£o das previs√µes.
        - **Valida√ß√£o Rigorosa**: A performance do modelo √© validada de forma a garantir sua confiabilidade em diferentes cen√°rios.
        
        #### üìä M√©tricas do Modelo (Valores M√©dios)
        - **RMSE (Erro Quadr√°tico M√©dio)**: M√©dia de 2.45 mm.
        - **MAE (Erro Absoluto M√©dio)**: M√©dia de 1.87 mm.
        - **R¬≤ (Coeficiente de Determina√ß√£o)**: M√©dia de 0.78.
        
        Essas m√©tricas mostram que o modelo √© capaz de fazer previs√µes com alta qualidade.
        
        ---
        
        #### üë§ Sobre o Autor
        Este projeto foi desenvolvido por **Rafael Grecco Sanches** como parte de sua pesquisa acad√™mica.
        Se voc√™ quiser saber mais sobre este trabalho, sinta-se √† vontade para me contatar.
        """)
        
        st.markdown("---")
        st.subheader("üîó Meus Contatos")
        col_links1, col_links2, col_links3 = st.columns(3)
        with col_links1:
            st.markdown("[Curr√≠culo Lattes](https://lattes.cnpq.br/XXXXXXXXXXXXXXX)")
        with col_links2:
            st.markdown("[Google Acad√™mico](https://scholar.google.com/citations?user=XXXXXXXXXXXXXXX)")
        with col_links3:
            st.markdown("[LinkedIn](https://linkedin.com/in/XXXXXXXXXXXXXXX)")
            
    # Rodap√©
    st.markdown("---")
    st.markdown("**Desenvolvido por:** Rafael Grecco Sanches | **Vers√£o:** 2.1 | **√öltima atualiza√ß√£o:** 2024")

if __name__ == "__main__":
    main()
