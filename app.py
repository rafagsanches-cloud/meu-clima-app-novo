import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import io
import base64

# T√≠tulo do aplicativo e configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Sistema de Previs√£o Clim√°tica - Brasil",
    page_icon="üåßÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("üåßÔ∏è Sistema de Previs√£o Clim√°tica - Brasil")
st.markdown("### Previs√£o de Volume Di√°rio de Chuva (mm)")

# Sidebar para navega√ß√£o
st.sidebar.title("Navega√ß√£o")
opcao = st.sidebar.selectbox(
    "Escolha uma op√ß√£o:",
    ["Previs√£o Individual", "Mapa e Download de Dados", "Upload de CSV", "Sobre o Sistema"]
)

def make_prediction(data):
    """Simula uma previs√£o de precipita√ß√£o com base nos dados de entrada."""
    base_precip = np.random.uniform(0, 15)
    if data.get("temp_max", 25) > 30:
        base_precip *= 1.5
    if data.get("umidade", 50) > 70:
        base_precip *= 1.3
    
    # Simula varia√ß√µes por local
    municipio = data.get("municipio", "Itirapina")
    if municipio == "S√£o Paulo":
        base_precip *= 1.2
    elif municipio == "Rio de Janeiro":
        base_precip *= 1.1
    
    return max(0, base_precip)

def generate_all_brazil_data():
    """Gera um DataFrame simulado com dados de precipita√ß√£o para todos os munic√≠pios do Brasil."""
    # Simula uma lista de munic√≠pios brasileiros
    municipios_simulados = [
        "S√£o Paulo", "Rio de Janeiro", "Belo Horizonte", "Salvador", "Fortaleza", 
        "Curitiba", "Manaus", "Recife", "Porto Alegre", "Bras√≠lia", "Campinas",
        "Goi√¢nia", "Bel√©m", "Guarulhos", "S√£o Lu√≠s", "S√£o Gon√ßalo", "Macei√≥", "Teresina",
        "Campo Grande", "Natal", "Duque de Caxias", "Nova Igua√ßu", "S√£o Bernardo do Campo",
        "Jo√£o Pessoa", "Santo Andr√©", "Osasco", "Jaboat√£o dos Guararapes", "Contagem",
        "Uberl√¢ndia", "Ribeir√£o Preto", "Sorocaba", "Londrina", "Aracaju", "Joinville",
        "Cuiab√°", "Ananindeua", "Juiz de Fora", "Niter√≥i", "Campos dos Goytacazes",
        "Caxias do Sul", "Santos", "Mau√°", "Vila Velha", "Aparecida de Goi√¢nia"
    ]
    
    # Cria uma lista de datas para 30 dias
    start_date = datetime.now() - timedelta(days=30)
    dates = [start_date + timedelta(days=i) for i in range(30)]
    
    data_list = []
    
    for municipio in municipios_simulados:
        for date in dates:
            # Simula um valor de precipita√ß√£o
            precipitacao = np.random.uniform(0, 50)
            data_list.append({
                "municipio": municipio,
                "data": date.strftime("%Y-%m-%d"),
                "precipitacao_mm": precipitacao
            })
            
    return pd.DataFrame(data_list)

# --- Se√ß√£o: Previs√£o Individual ---
if opcao == "Previs√£o Individual":
    st.header("üìä Previs√£o Individual")
    
    municipios_list = generate_all_brazil_data()["municipio"].unique().tolist()
    municipio_selecionado = st.selectbox("Selecione o Munic√≠pio (com barra de rolagem)", municipios_list)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Dados Meteorol√≥gicos")
        temp_max = st.slider("Temperatura M√°xima (¬∞C)", -5.0, 45.0, 25.0, 0.1)
        temp_min = st.slider("Temperatura M√≠nima (¬∞C)", -10.0, 35.0, 15.0, 0.1)
        umidade = st.slider("Umidade Relativa (%)", 0.0, 100.0, 60.0, 1.0)
        pressao = st.slider("Press√£o Atmosf√©rica (hPa)", 900.0, 1050.0, 1013.0, 0.1)
        
    with col2:
        st.subheader("Dados Complementares")
        vel_vento = st.slider("Velocidade do Vento (m/s)", 0.0, 30.0, 5.0, 0.1)
        rad_solar = st.slider("Radia√ß√£o Solar (MJ/m¬≤)", 0.0, 35.0, 20.0, 0.1)
        data_previsao = st.date_input("Data da Previs√£o", datetime.now())
        
    if st.button("üîÆ Fazer Previs√£o", type="primary"):
        dados_input = {
            "municipio": municipio_selecionado,
            "temp_max": temp_max,
            "temp_min": temp_min,
            "umidade": umidade,
            "pressao": pressao,
            "vel_vento": vel_vento,
            "rad_solar": rad_solar
        }
        
        previsao = make_prediction(dados_input)
        
        st.success(f"üåßÔ∏è Previs√£o de Precipita√ß√£o para {municipio_selecionado}: **{previsao:.2f} mm**")
        
        if previsao < 1:
            st.info("‚òÄÔ∏è Dia seco - Precipita√ß√£o muito baixa")
        elif previsao < 5:
            st.info("üå§Ô∏è Chuva leve - Precipita√ß√£o baixa")
        elif previsao < 15:
            st.warning("üå¶Ô∏è Chuva moderada - Precipita√ß√£o moderada")
        else:
            st.error("‚õàÔ∏è Chuva intensa - Precipita√ß√£o alta")
            
        fig = go.Figure(data=[
            go.Bar(x=["Previs√£o"], y=[previsao], marker_color="lightblue")
        ])
        fig.update_layout(
            title="Volume de Chuva Previsto",
            yaxis_title="Precipita√ß√£o (mm)",
            showlegend=False
        )
        st.plotly_chart(fig, use_container_width=True)

# --- Se√ß√£o: Mapa e Download de Dados ---
elif opcao == "Mapa e Download de Dados":
    st.header("üó∫Ô∏è Mapa Interativo do Brasil")
    st.markdown("Passe o mouse sobre os estados para visualizar. Clique no bot√£o para baixar dados de todos os munic√≠pios.")

    # URL p√∫blica do GeoJSON para os estados do Brasil
    brazil_geojson_url = 'https://raw.githubusercontent.com/codeforamerica/click-that-hood/master/geojson/brazil-states.geojson'
    
    # Cria um DataFrame com dados simulados para colorir o mapa
    brazil_df = pd.DataFrame({
        "Estado": ["AC", "AL", "AM", "AP", "BA", "CE", "DF", "ES", "GO", "MA", "MG", "MS", "MT", "PA", "PB", "PE", "PI", "PR", "RJ", "RN", "RO", "RR", "RS", "SC", "SE", "SP", "TO"],
        "Simulacao_Precipitacao": np.random.uniform(5, 25, 27) # Dados variados para colorir
    })
    
    fig_mapa = px.choropleth(
        brazil_df,
        geojson=brazil_geojson_url,
        locations="Estado",
        locationmode="geojson-id",
        title="Previs√£o de Chuva por Estado (Simula√ß√£o)",
        color="Simulacao_Precipitacao",
        color_continuous_scale="Viridis",
        labels={'Simulacao_Precipitacao':'Simula√ß√£o (mm)'},
        hover_name="Estado"
    )
    fig_mapa.update_geos(fitbounds="locations", visible=False)
    fig_mapa.update_layout(
        margin={"r":0,"t":50,"l":0,"b":0}
    )
    st.plotly_chart(fig_mapa, use_container_width=True)

    st.markdown("---")
    st.header("üì• Download de Dados Completos")
    st.markdown("Clique no bot√£o para baixar um arquivo CSV com dados di√°rios simulados para todos os munic√≠pios.")

    if st.button(f"üì• Baixar Dados de Todos os Munic√≠pios", type="primary"):
        with st.spinner('Gerando arquivo...'):
            df_dados_completos = generate_all_brazil_data()
            csv_file = df_dados_completos.to_csv(index=False)
            b64 = base64.b64encode(csv_file.encode()).decode()
            href = f'<a href="data:file/csv;base64,{b64}" download="previsao_todos_municipios_brasil.csv">Clique aqui para baixar o arquivo</a>'
            st.markdown(href, unsafe_allow_html=True)
        st.success("Arquivo gerado com sucesso!")

# --- Se√ß√£o: Upload de CSV ---
elif opcao == "Upload de CSV":
    st.header("üìÅ Upload de Arquivo CSV")
    st.markdown("""
    **Formato esperado do CSV:**
    - Colunas: `data`, `temp_max`, `temp_min`, `umidade`, `pressao`, `vel_vento`, `rad_solar`
    - Data no formato: `YYYY-MM-DD`
    """)
    uploaded_file = st.file_uploader("Escolha um arquivo CSV", type="csv")
    
    if uploaded_file is not None:
        try:
            df = pd.read_csv(uploaded_file)
            st.success("Arquivo carregado com sucesso!")
            st.subheader("Preview dos Dados")
            st.dataframe(df.head())
            
            if st.button("üîÆ Processar Previs√µes", type="primary"):
                with st.spinner('Processando previs√µes...'):
                    previsoes = [make_prediction(row.to_dict()) for _, row in df.iterrows()]
                df["previsao_precipitacao"] = previsoes
                st.subheader("Resultados das Previs√µes")
                st.dataframe(df)
                
                if "data" in df.columns:
                    df["data"] = pd.to_datetime(df["data"])
                    fig = px.line(df, x="data", y="previsao_precipitacao", 
                                  title="Previs√£o de Precipita√ß√£o ao Longo do Tempo")
                    fig.update_layout(yaxis_title="Precipita√ß√£o (mm)")
                    st.plotly_chart(fig, use_container_width=True)
                
                csv_file = df.to_csv(index=False)
                b64 = base64.b64encode(csv_file.encode()).decode()
                href = f"<a href=\"data:file/csv;base64,{b64}\" download=\"previsoes_clima.csv\">üì• Download dos Resultados</a>"
                st.markdown(href, unsafe_allow_html=True)
        except Exception as e:
            st.error(f"Erro ao processar arquivo: {str(e)}")

# --- Se√ß√£o: Sobre o Sistema ---
else:  # Sobre o Sistema
    st.header("‚ÑπÔ∏è Sobre o Sistema")
    st.markdown("""
    ### Sistema de Previs√£o Clim√°tica para o Brasil
    
    Este sistema foi desenvolvido para demonstrar uma interface interativa para visualiza√ß√£o e 
    download de dados de precipita√ß√£o (em mil√≠metros) para munic√≠pios brasileiros.
    
    #### üéØ Caracter√≠sticas Principais:
    - **Interface Interativa**: Navega√ß√£o e download de dados via mapa.
    - **Dados Simulados**: Os dados de previs√£o s√£o simulados para fins de demonstra√ß√£o da plataforma.
    - **Visualiza√ß√£o**: Utiliza a biblioteca Plotly para gerar gr√°ficos e mapas.
    
    #### üî¨ Tecnologias Utilizadas:
    - **Interface**: Streamlit
    - **Visualiza√ß√£o**: Plotly
    
    #### üåç Aplica√ß√µes:
    - Agricultura de precis√£o
    - Gest√£o de recursos h√≠dricos
    - Planejamento urbano
    - Pesquisa clim√°tica
    """)
    
    # --- Se√ß√£o de Cr√©ditos ---
    st.markdown("---")
    st.header("üë®‚Äçüíª Sobre o Autor")
    st.markdown("""
    Este projeto foi desenvolvido por:
    - **Nome:** Rafael Grecco Sanches
    
    #### Links Profissionais:
    - **Lattes:** [Seu Link do Lattes](<URL DO SEU LATTES>)
    - **Google Acad√™mico:** [Seu Perfil no Google Acad√™mico](<URL DO SEU GOOGLE ACAD√äMICO>)
    - **Outros:** [Seu Site ou LinkedIn](<URL DO SEU SITE/LINKEDIN>)
    """)

# Footer
st.markdown("---")
st.markdown("**Desenvolvido por:** Manus AI | **Vers√£o:** 1.0 | **√öltima atualiza√ß√£o:** 2024")
